// This file was auto-generated by ML.NET Model Builder. 

using Microsoft.ML;
using Microsoft.ML.Trainers.LightGbm;

namespace ImiknWifiNavigationApp.IWNA.ML.Models;

public partial class WifiFingerprintModel
{
    public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
    {
        var pipeline = BuildPipeline(context);
        var model = pipeline.Fit(trainData);

        return model;
    }

    /// <summary>
    ///     build the pipeline that is used from model builder. Use this function to retrain model.
    /// </summary>
    /// <param name="mlContext"></param>
    /// <returns></returns>
    public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
    {
        // Data process configuration with pipeline data transformations
        var pipeline = mlContext.Transforms
            .ReplaceMissingValues(new[]
            {
                new InputOutputColumnPair(@"col0", @"col0"),
                new InputOutputColumnPair(@"col2", @"col2")
            })
            .Append(mlContext.Transforms.Concatenate(@"Features", @"col0", @"col2"))
            .Append(mlContext.Transforms.Conversion.MapValueToKey(@"col1", @"col1"))
            .Append(mlContext.MulticlassClassification.Trainers.LightGbm(new LightGbmMulticlassTrainer.Options
            {
                NumberOfLeaves = 8, MinimumExampleCountPerLeaf = 5, NumberOfIterations = 14,
                MaximumBinCountPerFeature = 1024, LearningRate = 0.00420920545373487F, LabelColumnName = @"col1",
                FeatureColumnName = @"Features",
                Booster = new GradientBooster.Options
                {
                    SubsampleFraction = 1F, FeatureFraction = 0.94289653327183F, L1Regularization = 2E-10F,
                    L2Regularization = 0.355780686836769F
                }
            }))
            .Append(mlContext.Transforms.Conversion.MapKeyToValue(@"PredictedLabel", @"PredictedLabel"));

        return pipeline;
    }
}